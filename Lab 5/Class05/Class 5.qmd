---
title: "Class 5: Data Viz with ggplot"
author: "Nhi To (PID: A18053310)"
format: html
---

## Intro to ggplot

There are many graphics systems in R (ways to make plots and figures). These include "base" R plots. Today we will focus mostly on the **ggplot2** package. 

Let's start with a plot of a simple in-built dataset called 'cars'. 



```{r}
cars
```

```{r}
plot(cars)
```

Let's see how we canmake this figure using **ggplot**. First, I need to install this package on my computer. TO installl any R package, I use the function 'install.packages()'

>I will run 'install.packages("ggplot2") in my R console not this quarto document!
 
 Before I can use any functions from add on packages, I need to load the pacakge from my "library()" with the 'library(ggplot2)' call.
 
```{r}
library(ggplot2)
ggplot(cars)
```

All ggplot figures have at least 3 things (called layers). These include:

- **data** (the input dataset I want to plot from)
- **aes** (the aesthtetic mapping of the data to my pot )
- **geoms** (The geom_point(), geom_line etc. that I want to draw)

```{r}
ggplot(cars) +
  aes (x=speed, y=dist) +
  geom_point()
```

Let's add a line to show the relationship here: 
```{r}
ggplot(cars) +
  aes (x=speed, y=dist) +
  geom_point() +
  geom_smooth(method="lm") +
  theme_bw()+
  labs(title="My first GGPLOT")
```

> Q1 Which geometric layer should be used to create scater plots in ggplot2

geom_point()

## Gene expression figure

The code to read the dataset

```{r}
url <- "https://bioboot.github.io/bimm143_S20/class-material/up_down_expression.txt"
genes <- read.delim(url)
head(genes)
```

>How many genes are in this dataset?

```{r}
nrow(genes)
```

>Use the colnames() function and the ncol() function on the genes data frame to find out what the column names are (we will need these later) and how many columns there are. How many columns did you find? 

```{r}
colnames(genes)
ncol(genes)
```


>Q. Use the table() function on the State column of this data.frame to find out how many ‘up’ regulated genes there are. What is your answer? 

```{r}
table(genes$State)
```


A first plot of this dataset

```{r}
ggplot(genes) +
  aes(x=Condition1, y=Condition2, col=State)+
  geom_point() +
  theme_bw()+
labs(title="Gene Expression changes upon drug treatment", 
     x="Control Expression", 
     y="Drug Presence Expression")+
scale_color_manual( values=c("blue","gray", "red"))
```

>Q. Using your values above and 2 significant figures. What fraction of total genes is up-regulated in this dataset?


```{r}
round( table(genes$State)/nrow(genes), 4)
```

```{r}
n.tot <- nrow(genes)
vals <- table(genes$State)

vals.percent <- vals/n.tot *100
round(vals.percent,2)
```



```{r}
p <- ggplot(genes)+
  aes(x=Condition1, y=Condition2, col=State)+
  geom_point()

p
#p+ scale_color_manual( values=c("blue","gray", "red"))
```


```{r}
p + labs(title="Hello")
```


```{r}
p+ theme_minimal()
```

```{r}
# File location online
url <- "https://raw.githubusercontent.com/jennybc/gapminder/master/inst/extdata/gapminder.tsv"

gapminder <- read.delim(url)

```

```{r}
library(dplyr)

gapminder_2007 <- gapminder %>% filter(year==2007)
```

```{r}
ggplot(gapminder_2007)+ 
  aes(x=gdpPercap, y=lifeExp,color=continent, size=pop)+
geom_point(alpha=0.5)

```

```{r}
ggplot(gapminder_2007)+ 
  aes(x=gdpPercap, y=lifeExp, color=pop)+
geom_point(alpha=0.8)

```


```{r}
ggplot(gapminder_2007) + 
  aes(x = gdpPercap, y = lifeExp, size = pop) +
  geom_point(alpha=0.5)
```


```{r}
ggplot(gapminder_2007) + 
  geom_point(aes(x = gdpPercap, y = lifeExp,
                 size = pop), alpha=0.5) + 
  scale_size_area(max_size = 10)
```


```{r}
gapminder_1957 <- gapminder %>% filter(year==1957)

ggplot(gapminder_1957) + 
  aes(x = gdpPercap, y = lifeExp, color=continent,
                 size = pop) +
  geom_point(alpha=0.7) + 
  scale_size_area(max_size = 10) 
```


```{r}
gapminder_1957 <- gapminder %>% filter(year==1957 | year==2007)

ggplot(gapminder_1957) + 
  geom_point(aes(x = gdpPercap, y = lifeExp, color=continent,
                 size = pop), alpha=0.7) + 
  scale_size_area(max_size = 10) +
  facet_wrap(~year)
```


